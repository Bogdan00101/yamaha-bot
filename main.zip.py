import telebot
from telebot import types
import os
import json
from datetime import datetime, timedelta
import threading
import time
from collections import defaultdict

# –ó–º—ñ–Ω–Ω—ñ –∑ —Å–µ–∫—Ä–µ—Ç—ñ–≤
TOKEN = os.environ.get("BOT_TOKEN")
MY_ID = int(os.environ.get("MY_ID"))
bot = telebot.TeleBot(TOKEN)

# –§–∞–π–ª–∏
total_file = "total.txt"
history_file = "history.json"
goal_file = "goal.txt"
reminder_file = "reminder_day.txt"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
if not os.path.exists(total_file):
    with open(total_file, "w") as f:
        f.write("0")

if not os.path.exists(history_file):
    with open(history_file, "w") as f:
        json.dump([], f)

if not os.path.exists(goal_file):
    with open(goal_file, "w") as f:
        f.write("10000")  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Ü—ñ–ª—å

if not os.path.exists(reminder_file):
    with open(reminder_file, "w") as f:
        f.write("6")  # –Ω–µ–¥—ñ–ª—è

# –§—É–Ω–∫—Ü—ñ—ó
def get_total():
    with open(total_file, "r") as f:
        return float(f.read())

def update_total(amount):
    with open(total_file, "w") as f:
        f.write(str(amount))

def save_history(action, amount):
    with open(history_file, "r") as f:
        data = json.load(f)
    data.append({
        "date": datetime.now().strftime("%Y-%m-%d"),
        "type": action,
        "amount": amount
    })
    with open(history_file, "w") as f:
        json.dump(data, f, indent=2)

def undo_last_transaction():
    with open(history_file, "r") as f:
        data = json.load(f)
    if not data:
        return False
    last = data.pop()
    total = get_total()
    if last["type"] == "add":
        total -= last["amount"]
    elif last["type"] == "minus":
        total += last["amount"]
    update_total(total)
    with open(history_file, "w") as f:
        json.dump(data, f, indent=2)
    return True

def get_goal():
    with open(goal_file, "r") as f:
        return float(f.read())

def set_goal(amount):
    with open(goal_file, "w") as f:
        f.write(str(amount))

def get_reminder_day():
    with open(reminder_file, "r") as f:
        return int(f.read())

def set_reminder_day(day):
    with open(reminder_file, "w") as f:
        f.write(str(day))

# –û–±—Ä–æ–±–Ω–∏–∫–∏
@bot.message_handler(commands=["start", "help"])
def help_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–¥–∞—Ç–∏", "‚ûñ –í–∏—Ç—Ä–∞—Ç–∏")
    markup.add("üí∞ –ë–∞–ª–∞–Ω—Å", "üìà –ü—Ä–æ–≥—Ä–µ—Å", "üßæ –Ü—Å—Ç–æ—Ä—ñ—è")
    markup.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîÅ –°–∫–∞—Å—É–≤–∞—Ç–∏", "üéØ –ó–∞–¥–∞—Ç–∏ —Ü—ñ–ª—å")
    markup.add("üìÖ –î–µ–Ω—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", "üîÑ –°–∫–∏–Ω—É—Ç–∏")
    bot.send_message(message.chat.id, 
        "üìò –ö–æ–º–∞–Ω–¥–∏:\n"
        "/add ‚Äì –¥–æ–¥–∞—Ç–∏ —Å—É–º—É\n"
        "/minus ‚Äì –≤–∏—Ç—Ä–∞—Ç–∏\n"
        "/total ‚Äì –±–∞–ª–∞–Ω—Å\n"
        "/progress ‚Äì –ø—Ä–æ–≥—Ä–µ—Å –¥–æ —Ü—ñ–ª—ñ\n"
        "/history ‚Äì —ñ—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π\n"
        "/stats ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º—ñ—Å—è—Ü—è—Ö\n"
        "/undo ‚Äì —Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é\n"
        "/reset ‚Äì —Å–∫–∏–Ω—É—Ç–∏ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è\n"
        "/setgoal ‚Äì –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ü—ñ–ª—å\n"
        "/setreminder ‚Äì –∑–º—ñ–Ω–∏—Ç–∏ –¥–µ–Ω—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n"
        "/help ‚Äì –¥–æ–ø–æ–º–æ–≥–∞\n",
        reply_markup=markup
    )

@bot.message_handler(commands=["add"])
def ask_add(message):
    msg = bot.reply_to(message, "–í–ø–∏—à–∏ —Å—É–º—É, —è–∫—É —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ üí∏")
    bot.register_next_step_handler(msg, process_add)

def process_add(message):
    try:
        amount = float(message.text.replace(",", "."))
        total = get_total() + amount
        update_total(total)
        save_history("add", amount)
        bot.reply_to(message, f"‚ûï –î–æ–¥–∞–Ω–æ {amount:.2f} z≈Ç\nüí∞ –ó–∞–≥–∞–ª–æ–º: {total:.2f} z≈Ç")
    except:
        bot.reply_to(message, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ —Å—É–º—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 100)")

@bot.message_handler(commands=["minus"])
def ask_minus(message):
    msg = bot.reply_to(message, "–í–ø–∏—à–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç ‚ùå")
    bot.register_next_step_handler(msg, process_minus)

def process_minus(message):
    try:
        amount = float(message.text.replace(",", "."))
        total = get_total() - amount
        update_total(total)
        save_history("minus", amount)
        bot.reply_to(message, f"‚ûñ –í–∏—Ç—Ä–∞—á–µ–Ω–æ {amount:.2f} z≈Ç\nüí∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {total:.2f} z≈Ç")
    except:
        bot.reply_to(message, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ —Å—É–º—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 50)")

@bot.message_handler(commands=["total"])
def total_money(message):
    bot.reply_to(message, f"üí∞ –ë–∞–ª–∞–Ω—Å: {get_total():.2f} z≈Ç")

@bot.message_handler(commands=["progress"])
def show_progress(message):
    total = get_total()
    goal = get_goal()
    percent = (total / goal) * 100
    bot.reply_to(message, f"üìà –ü—Ä–æ–≥—Ä–µ—Å:\n{total:.2f} z≈Ç —ñ–∑ {goal:.2f} z≈Ç\n"
                          f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ –Ω–∞ {percent:.1f}%")

@bot.message_handler(commands=["history"])
def show_history(message):
    with open(history_file, "r") as f:
        data = json.load(f)
    if not data:
        bot.reply_to(message, "üì≠ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
        return
    msg = "üßæ –û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:\n"
    for item in data[-10:]:
        sign = "‚ûï" if item["type"] == "add" else "‚ûñ"
        msg += f"{item['date']}: {sign} {item['amount']:.2f} z≈Ç\n"
    bot.reply_to(message, msg)

@bot.message_handler(commands=["stats"])
def show_stats(message):
    with open(history_file, "r") as f:
        data = json.load(f)
    stats = defaultdict(lambda: {"add": 0, "minus": 0})
    for item in data:
        month = item["date"][:7]
        stats[month][item["type"]] += item["amount"]
    msg = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º—ñ—Å—è—Ü—è—Ö:\n"
    for month in sorted(stats.keys()):
        msg += f"{month} ‚ûï {stats[month]['add']} z≈Ç / ‚ûñ {stats[month]['minus']} z≈Ç\n"
    bot.reply_to(message, msg)

@bot.message_handler(commands=["reset"])
def reset(message):
    update_total(0)
    with open(history_file, "w") as f:
        json.dump([], f)
    bot.reply_to(message, "üîÑ –ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ –¥–æ 0")

@bot.message_handler(commands=["undo"])
def undo(message):
    if undo_last_transaction():
        bot.reply_to(message, "üîÅ –û—Å—Ç–∞–Ω–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")

@bot.message_handler(commands=["setgoal"])
def ask_goal(message):
    msg = bot.reply_to(message, "üéØ –í–≤–µ–¥–∏ –Ω–æ–≤—É —Ü—ñ–ª—å —É z≈Ç:")
    bot.register_next_step_handler(msg, set_new_goal)

def set_new_goal(message):
    try:
        amount = float(message.text.replace(",", "."))
        set_goal(amount)
        bot.reply_to(message, f"üéØ –¶—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {amount:.2f} z≈Ç")
    except:
        bot.reply_to(message, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ —Å—É–º—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

@bot.message_handler(commands=["setreminder"])
def ask_day(message):
    msg = bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏ –¥–µ–Ω—å —Ç–∏–∂–Ω—è (0 ‚Äî –ø–æ–Ω–µ–¥—ñ–ª–æ–∫, 6 ‚Äî –Ω–µ–¥—ñ–ª—è):")
    bot.register_next_step_handler(msg, set_new_reminder)

def set_new_reminder(message):
    try:
        day = int(message.text)
        if 0 <= day <= 6:
            set_reminder_day(day)
            bot.reply_to(message, "üìÖ –î–µ–Ω—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ!")
        else:
            bot.reply_to(message, "‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 6")
    except:
        bot.reply_to(message, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

# –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
def weekly_reminder():
    while True:
        now = datetime.now()
        target_day = get_reminder_day()
        days_ahead = (target_day - now.weekday()) % 7
        next_reminder = now + timedelta(days=days_ahead)
        next_time = datetime.combine(next_reminder.date(), datetime.min.time()) + timedelta(hours=10)
        wait_seconds = (next_time - now).total_seconds()
        time.sleep(max(wait_seconds, 0))
        bot.send_message(MY_ID, "üí° –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –Ω–µ –∑–∞–±—É–¥—å –≤—ñ–¥–∫–ª–∞—Å—Ç–∏ –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª üèçÔ∏èüí∏")
        time.sleep(86400)  # –¥–æ–±–∞ —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–ø–∞–º—É

# –§–æ–Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫
threading.Thread(target=weekly_reminder, daemon=True).start()

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda m: True)
def handle_buttons(message):
    text = message.text.lower()
    if "–¥–æ–¥–∞—Ç–∏" in text:
        ask_add(message)
    elif "–≤–∏—Ç—Ä–∞—Ç–∏" in text:
        ask_minus(message)
    elif "–±–∞–ª–∞–Ω—Å" in text:
        total_money(message)
    elif "–ø—Ä–æ–≥—Ä–µ—Å" in text:
        show_progress(message)
    elif "—ñ—Å—Ç–æ—Ä—ñ—è" in text:
        show_history(message)
    elif "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in text:
        show_stats(message)
    elif "—Å–∫–∞—Å—É–≤–∞—Ç–∏" in text:
        undo(message)
    elif "—Å–∫–∏–Ω—É—Ç–∏" in text:
        reset(message)
    elif "—Ü—ñ–ª—å" in text:
        ask_goal(message)
    elif "–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è" in text:
        ask_day(message)


# üöÄ Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î üèçÔ∏èüí∞"

def run():
    app.run(host='0.0.0.0', port=8080)

Thread(target=run).start()

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î üî•")
bot.infinity_polling()